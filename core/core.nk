this #root this pushes

root #<| [
  "( -- ): moves stack cursor once to the left."
  stack |at 1 - stack swap |to
] opens


root #|> [
  "( -- ): moves stack cursor once to the right."
  stack |at 1 + stack swap |to
] opens


root #continuationBlock [
  "( C -- cB ): leaves the continuation Block of a Continuation."
  0 fromLeft
] opens


root #continuationStack [
  "( C -- cS ): leaves the continuation Stack of a Continuation."
  1 fromLeft
] opens


root #ahead [
  "( -- B ): leaves caller Block on the stack."
  conts dup count 3 - fromLeft continuationBlock
] opens


root #inject [
  "( B F -- ): inserts Form to Block: adds Form to Block,
   and moves cursor back again."
  <| dup |> shove dup |at 1 - |to
] opens


root #there [
  "( S B -- S ): opens Block in Stack, leaves Stack. Ahead
   is transferred to block."
  <| dup |> ahead #hydrate inject
] opens


root #eject [
  "( [ ... | F ... ]B -- [ ... | ... ]B -- F ): drops and
   leaves the Form after cursor in Block."
  [ |> ] there cherry
] opens


root #@: [
  "( F @: N ): makes an opener entry called Name for Form."
  ahead swap ahead eject swap opens
] opens


[ "( F $: N -- ): makes a pusher entry called Name for Form."
  ahead swap ahead eject swap pushes
] @: $:


[ "( V =: N -- ): submits Value to an already defined entry
   under the specified Name."
  ahead swap ahead eject swap submit
] @: =:


[ "( help F -- ): echoes help for Form. If form is a word,
   fetches it in caller first."
  ahead dup eject dup word?
    [ entry:fetch ]
    [ nip         ]
  br desc echo
] @: help
